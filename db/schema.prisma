// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id                 Int                  @id @default(autoincrement())
  uuid               String               @default(uuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  name               String?
  email              String               @unique
  hashedPassword     String?
  role               String               @default("USER")
  stripeCustomerId   String?
  tokens             Token[]
  sessions           Session[]
  userChecklists     UserChecklist[]
  transactions       Transaction[]
  subscriptions      Subscription[]
  SubscriptionChange SubscriptionChange[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model UserChecklist {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  checklistId Int
  isComplete  Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
  checklist   Checklist @relation(fields: [checklistId], references: [id])

  @@unique([userId, checklistId])
}

model ChecklistItem {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  displayText String
  isComplete  Boolean   @default(false)
  checklist   Checklist @relation(fields: [checklistId], references: [id])
  checklistId Int

  @@unique([displayText, checklistId])
}

model Checklist {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String
  checklistItems ChecklistItem[]

  userChecklists UserChecklist[]
}

model Subscription {
  id                  Int                  @id @default(autoincrement())
  userId              Int
  user                User                 @relation(fields: [userId], references: [id])
  tier                PaymentTierEnum      @default(FREE)
  createdAt           DateTime             @default(now())
  subscriptionChanges SubscriptionChange[]
}

model SubscriptionChange {
  id             Int             @id @default(autoincrement())
  userId         Int
  user           User            @relation(fields: [userId], references: [id])
  subscriptionId Int
  subscription   Subscription    @relation(fields: [subscriptionId], references: [id])
  previousTier   PaymentTierEnum
  newTier        PaymentTierEnum
  createdAt      DateTime        @default(now())
}

model Transaction {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  stripePaymentId String
  description     String
  amount          Float
  createdAt       DateTime @default(now())
}

enum PaymentTierEnum {
  FREE
  PAY_WHAT_YOU_CAN
  PREMIUM
}
