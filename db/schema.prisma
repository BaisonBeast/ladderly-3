// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt

  adminNotes     String  @default("")
  email          String  @unique
  emailBackup    String  @default("")
  emailStripe    String  @default("")
  hashedPassword String?
  nameFirst      String  @default("")
  nameLast       String  @default("")

  hasPublicProfileEnabled Boolean @default(false)
  hasShoutOutsEnabled     Boolean @default(false)

  quizResults         QuizResult[]
  role                RoleEnum             @default(USER)
  sessions            Session[]
  subscriptionChanges SubscriptionChange[]
  subscriptions       Subscription[]
  tokens              Token[]
  transactions        Transaction[]
  userChecklists      UserChecklist[]
  uuid                String               @default(uuid())
  userChecklistItems  UserChecklistItem[]
}

enum RoleEnum {
  ADMIN
  USER
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model UserChecklist {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userId             Int
  checklistId        Int
  isComplete         Boolean             @default(false)
  user               User                @relation(fields: [userId], references: [id])
  checklist          Checklist           @relation(fields: [checklistId], references: [id])
  userChecklistItems UserChecklistItem[]

  @@unique([userId, checklistId])
}

model UserChecklistItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isComplete Boolean @default(false)

  checklistItem   ChecklistItem @relation(fields: [checklistItemId], references: [id])
  checklistItemId Int
  userChecklist   UserChecklist @relation(fields: [userChecklistId], references: [id])
  userChecklistId Int
  user            User          @relation(fields: [userId], references: [id])
  userId          Int

  @@unique([userChecklistId, checklistItemId])
}

model ChecklistItem {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  displayIndex Int
  displayText  String
  detailText   String   @default("")
  isRequired   Boolean  @default(true)
  linkText     String   @default("")
  linkUri      String   @default("")

  // currently, versions are ISO
  // so we can sort lexicographically
  version String @default("2023-07-18T00:00:00.517Z")

  checklist          Checklist           @relation(fields: [checklistId], references: [id])
  checklistId        Int
  userChecklistItems UserChecklistItem[]

  @@unique([displayText, checklistId])
}

model Checklist {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String
  version        String
  checklistItems ChecklistItem[]
  userChecklists UserChecklist[]
}

model Subscription {
  id                  Int                  @id @default(autoincrement())
  userId              Int
  user                User                 @relation(fields: [userId], references: [id])
  tier                PaymentTierEnum      @default(FREE)
  type                String               @default("ACCOUNT_PLAN")
  createdAt           DateTime             @default(now())
  subscriptionChanges SubscriptionChange[]
}

model SubscriptionChange {
  id                  Int             @id @default(autoincrement())
  userId              Int
  user                User            @relation(fields: [userId], references: [id])
  subscriptionId      Int
  subscription        Subscription    @relation(fields: [subscriptionId], references: [id])
  previousTier        PaymentTierEnum
  newTier             PaymentTierEnum
  createdAt           DateTime        @default(now())
  stripeTransactionId String?
}

model Transaction {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  stripePaymentId String
  description     String
  amount          Float
  createdAt       DateTime @default(now())
}

enum PaymentTierEnum {
  FREE
  PAY_WHAT_YOU_CAN
  PREMIUM
}

model FlashCard {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  frontText String
  backText  String

  sourcePlatformId   String
  sourcePlatformName String
  FlashCardDeck      FlashCardDeck? @relation(fields: [flashCardDeckId], references: [id])
  flashCardDeckId    Int?
}

model PossibleAnswer {
  id                 Int       @id @default(autoincrement())
  inputId            String    @unique
  text               String
  quizItemId         Int
  quizItem           QuizItem  @relation(fields: [quizItemId], references: [id], name: "PossibleAnswersToQuizItem")
  isCorrectAnswerFor QuizItem? @relation("CorrectAnswerToQuizItem")
  correctAnswerForId Int?
}

model QuizItem {
  id              Int              @id @default(autoincrement())
  inputId         String           @unique
  questionText    String
  possibleAnswers PossibleAnswer[] @relation("PossibleAnswersToQuizItem")
  correctAnswer   PossibleAnswer?  @relation(fields: [correctAnswerId], references: [id], name: "CorrectAnswerToQuizItem")
  correctAnswerId Int?             @unique
  quiz            Quiz?            @relation(fields: [quizId], references: [id], name: "QuizItemsToQuiz")
  quizId          Int
}

model Quiz {
  id                 Int              @id @default(autoincrement())
  inputId            String           @unique
  name               String           @unique
  quizItems          QuizItem[]       @relation("QuizItemsToQuiz")
  sourcePlatformId   String
  sourcePlatformName String
  CurriculumUnit     CurriculumUnit[]
  QuizResult         QuizResult[]
}

model CurriculumUnit {
  id              Int           @id @default(autoincrement())
  inputId         String        @unique
  quiz            Quiz          @relation(fields: [quizId], references: [id])
  quizId          Int
  flashCardDeck   FlashCardDeck @relation(fields: [flashCardDeckId], references: [id])
  flashCardDeckId Int
}

model FlashCardDeck {
  id             Int              @id @default(autoincrement())
  flashCards     FlashCard[]
  CurriculumUnit CurriculumUnit[]
}

model QuizResult {
  id     Int     @id @default(autoincrement())
  passed Boolean
  score  Float
  quiz   Quiz    @relation(fields: [quizId], references: [id])
  quizId Int
  user   User    @relation(fields: [userId], references: [id])
  userId Int
}
